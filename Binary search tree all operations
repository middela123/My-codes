class BST:
    def __init__(self,key):
        self.key=key
        self.lchild=None
        self.rchild=None
        
    def insert(self,data):
        if self.key is None:
            self.key=data
        if self.key==data:
            return
        if self.key>data:
            if self.lchild:
                self.lchild.insert(data)
            else:
                self.lchild=BST(data)
        else:
            if self.rchild:
                self.rchild.insert(data)
            else:
                self.rchild=BST(data)
                    
    def search(self,data):
        if self.key==data:
            print("available")
        else:
            if self.key>data:
                if self.lchild:
                    self.lchild.search(data)
                else:
                    print("Not available")
                    
            else:
                if self.rchild:
                    self.rchild.search(data)
                else:
                    print("Not available")
    
    def preorder(self):
        if self.key is None:
            print("Tree is empty")
        else:
            print(self.key,end=" ")
            if self.lchild:
                self.lchild.preorder()
            if self.rchild:
                self.rchild.preorder()
                
    def inorder(self):
        if self.key is None:
            print("Tree is empty")
        else:
            if self.lchild:
                self.lchild.inorder()
            print(self.key,end=" ")
            if self.rchild:
                self.rchild.inorder()
                
    def postorder(self):
        if self.key is None:
            print("Tree is empty")
        else:
            if self.lchild:
                self.lchild.postorder()
            if self.rchild:
                self.rchild.postorder()
            print(self.key,end=" ")
    
    def delete(self,data):
        if self.key is None:
            print("Tree is empty")
            return
        if self.key>data:
            if self.lchild:
                self.lchild=self.lchild.delete(data)
            else:
                print("data is not available")
        elif self.key<data:
            if self.rchild:
                self.rchild=self.rchild.delete(data)
            else:
                print("data is not available")
        else:
            if self.lchild is None:
                temp=self.rchild
                self=None
                return temp
            if self.rchild is None:
                temp=self.lchild
                self=None
                return temp
            node=self.rchild
            while node.lchild:
                node=node.lchild
            self.key=node.key
            self.rchild=self.rchild.delete(node.key)
        return self
root=BST(None)

while True:
    print('Menu'.center(20,'*'))
    print('1.INSERT','2.DELETE','3.DISPLAY','4.SEARCH',sep='\n')
    option=int(input('Select an option:'))
    if option==1:
        data=int(input('Enter data to be inserted'))
        root.insert(data)
    elif option==2:
        data=int(input('Enter data to be deleted'))
        root.delete(data)
    elif option==3:
        print("1.preorder","2.inorder","3.postorder",sep="\n")
        d_ata=int(input("Select an option:"))
        if d_ata==1:
            root.preorder()
        if d_ata==2:
            root.inorder()
        if d_ata==3:
            root.postorder()
    elif option==4:
        data=int(input('Enter data to be searched'))
        root.search(data)
    else:
        pass

    repeat=input('Do You Want to reapeat Yes/No:')
    if repeat.lower() == 'no': break
