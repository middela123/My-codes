class Node:
    def __init__(self,data):
        self.data=data
        self.nref=None
        self.pref=None
        
class Doubley_linkedlist:
    def __init__(self):
        self.head=None
        
    def insert_at_begining(self,data):
        temp=self.head
        if temp is None:
            new_node=Node(data)
            new_node.nref=self.head
            self.head=new_node
        else:
            temp=self.head
            new_node=Node(data)
            new_node.nref=self.head
            self.head=new_node
            
            
    def insert_at_end(self,data):
        temp=self.head
        if temp is None:
            new_node=Node(data)
            new_node.nref=self.head
            self.head=new_node
        else:
            temp=self.head
            while temp.nref != None:
                temp=temp.nref
            new_node=Node(data)
            temp.nref=new_node
            
    def insert_after(self,data,new_data):
            temp=self.head
            if temp==None:
                print('List is  empty insertion is impossible after ',data)
            else:
               temp=self.head
               while temp.data !=data:
                   temp=temp.nref
               new_node=Node(new_data)
               new_node.nref=temp.nref
               temp.nref=new_node
            
            
    def insert_before(self,data,new_data):
        temp=self.head
        if temp ==None:
            print('List is  empty insertion is impossible before ',data)
        elif temp.data==data:
            new_node=Node(new_data)
            new_node.nref=temp
            self.head=new_node
             
        else:
            temp=self.head
            while temp.nref.data!=data:
                temp=temp.nref
            new_node=Node(new_data)
            new_node.nref=temp.nref
            temp.nref=new_node
                        
    def delete_at_begining(self):
        temp=self.head
        if temp==None:
            print("Deleteion is not possible")
        elif temp.nref is None:
            temp=self.head
            self.head=None
        else:
                temp=self.head
                self.head=temp.nref
                
    def delete_at_end(self):
        temp=self.head
        if temp==None:
            print("Deleteion is not possible")
        elif temp.nref is None:
            temp=self.head
            self.head=None
        else:
                temp=self.head
                while temp.nref.nref !=  None:
                    temp=temp.nref
                temp.nref=None 
                
    def delete_after(self,data):
        temp=self.head
        if temp==None:
            print("Deleteion is not possible after",data)
        else:
                temp=self.head
                while temp.data != data:
                    temp=temp.nref
                temp.nref=temp.nref.nref
    
    def delete_before(self,data):
        temp=self.head
        if temp==None:
            print("Deleteion is not possible before",data)
        elif temp.data==data:
            temp.nref=self.head
        elif temp.nref.data == data:
            temp=self.head
            self.head=temp.nref
        else:
            temp=self.head
            while temp.nref.nref.data !=data:
                temp=temp.nref
            
            temp.nref=temp.nref.nref      
        
        
    def display(self):
        temp=self.head
        if self.head==None:
            print('Linked list is empty')
        else:
            temp=self.head
            while temp:
                print(temp.data,end='-->')
                temp=temp.nref
            print('None')        

dll=Doubley_linkedlist()

while True:
    print('Menu'.center(20,'*'))
    print('1.INSERT','2.DELETE','3.DISPLAY',sep='\n')
    option=int(input('Select an option:'))
    if option==1:
        print('1.insert at begining','2.insert at end','3.insert after','4.insert before',sep='\n')
        d_ata=int(input('select an option:'))
        if d_ata==1:
            data=int(input('Enter data to be inserted at begining:'))
            dll.insert_at_begining(data)
        elif d_ata==2:
            data=int(input('Enter data to be inserted at end:'))
            dll.insert_at_end(data)
        elif d_ata==3:
            data=int(input('Enter data to be inserted after:'))
            new_data=int(input('enter the data to be inserted:'))
            dll.insert_after(data,new_data)
        elif d_ata==4:
            data=int(input('Enter data to be inserted before:'))
            new_data=int(input('enter the data to be inserted:'))
            dll.insert_before(data,new_data)
            
    elif option==2:
        print('1.delete at begining','2.delete at end','3.delete after','4.delete before',sep='\n')
        d_ata=int(input('select an option:'))
        if d_ata==1:
            dll.delete_at_begining()
        elif d_ata==2:
            dll.delete_at_end()
        elif d_ata==3:
            data=int(input('Enter data to be deleted after:'))
            dll.delete_after(data)
        elif d_ata==4:
            data=int(input('Enter data to be deleted before:'))
            dll.delete_before(data)
    elif option==3:
        dll.display()

    repeat=input('Do You Want to reapeat Yes/No:')
    if repeat.lower() == 'no': break
