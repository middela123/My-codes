class node:
    def __init__(self,data):
        self.data=data
        self.next=None
        self.prev=None
        
class sll:
    def __init__(self):
        self.head=None
        self.tail=None
    
    def insert_at_begining(self,data):
        new_node=node(data)
        temp=self.head
        if temp is None:
            new_node.next=self.head
            self.head=new_node
        else:
            new_node.next=temp
            temp.prev=new_node
            self.head=new_node
        
    def insert_at_end(self,data):
        new_node=node(data)
        temp=self.head
        if temp is None:
            new_node.next=self.head
            self.head=new_node
        else:
            while temp.next is not None:
                temp=temp.next
            temp.next=new_node
            new_node.prev=temp
            
    def insert_before(self,data,new_data):
        new_node=node(new_data)
        temp=self.head
        if temp is None:
            print("Dll is empty")
        elif temp.data==data:
            new_node.next=temp
            temp.prev=new_node
            self.head=new_node
        else:
            temp1=temp
            while temp.data!=data:
                temp1=temp
                temp=temp.next
            new_node.next=temp1.next
            temp1.next=new_node
            new_node.prev=temp1
            temp.prev=new_node  
    
    def insert_after(self,data,new_data):
        new_node=node(new_data)
        temp=self.head
        temp1=temp
        if temp is None:
            print("Dll is empty")
        else:
            while temp1.data!=data:
                temp1=temp
                temp=temp.next
            new_node.next=temp1.next
            temp1.next=new_node
            new_node.prev=temp1
            temp.prev=new_node
            
    def delete_at_begining(self):
        temp=self.head
        if temp is None:
            print("Dll is empty")
        else:
            self.head=temp.next
            temp.prev=None
            
    def delete_at_end(self):
        temp=self.head
        if temp is None:
            print("Dll is empty")
        elif temp.next is None:
            self.head=None
        else:
            temp1=temp
            while temp.next!=None:
                temp1=temp
                temp=temp.next
            temp1.next=None
                
    def delete_before(self,data):
        temp=self.head
        if temp is None:
            print("dll is empty")
        elif temp.data==data:
            print("Cant delete as it is first element")
        else:
            temp1=temp
            temp2=temp
            while temp.data!=data:
                temp2=temp1
                temp1=temp
                temp=temp.next
            temp2.next=temp
            temp.prev=temp2
            
    def delete_after(self,data):
        temp=self.head
        temp1=temp
        if temp is None:
            print("Dll is empty")
        else:
            while temp.data!=data:
                temp=temp.next
            if temp.next.next is None:
                temp.next=None
            else:
                temp1=temp.next.next
                temp.next=temp1
                temp1.prev=temp
                
            
            
    def display(self):
        temp=self.head
        if temp is None:
            print("dll is empty")
        else:
            while temp is not None:
                print(temp.data,end="---->")
                temp=temp.next
            print("None")
    
    def display_reverse(self):
        temp=self.head
        if temp is None:
            print("dll is empty")
        if temp.next is  None:
            print(temp.data,end="--->")
            print("None")
        else:
            while temp.next is not None:
                temp=temp.next
            while temp.prev is not None:
                print(temp.data,end="--->")
                temp=temp.prev
            print(temp.data,end="--->")
            print("None")
                
ll=sll()
while True:
    print("1.Insert \n2.Delete \n3.Display \n4.Display Reverse")
    n=int(input())
    if n==1:
        print("1.Insert at begining \n2.Insert at end \n3.Insert before \n4.Insert after")
        option=int(input())
        if option==1:
            print("enter data to be inserted:")
            data=int(input())
            ll.insert_at_begining(data)
        if(option==2):
            print("enter data to be inserted:")
            data=int(input())
            ll.insert_at_end(data)
        if option==3:
            print("enter the data to be inserted before:")
            data=int(input())
            print("Enter data to be inserted")
            new_data=int(input())
            ll.insert_before(data,new_data)
        if option==4:
            print("enter the data to be inserted after:")
            data=int(input())
            print("Enter data to be inserted")
            new_data=int(input())
            ll.insert_after(data,new_data)
    elif n==2:
        print("1.Delete at begining \n2.Delete at end \n3.Delete before \n4.Delete after")
        option=int(input())
        if option==1:
            ll.delete_at_begining()
        if(option==2):
            ll.delete_at_end()
        if option==3:
            print("enter the data to be deleted before:")
            data=int(input())
            ll.delete_before(data)
        if option==4:
            print("enter the data to be deleted after:")
            data=int(input())
            ll.delete_after(data)
        
    elif n==3:
        ll.display()
    elif n==4:
        ll.display_reverse()
    print("Do u want to continue give yes or no:")
    s=input()
    if s.lower()=="no":
        break
